#pragma once

#include <stdint.h>
#include "../gdt/gdt.h"

enum gates
{
    IDT_DIVIDE_BY_ZERO_EXCEPTION,
    IDT_DEBUG_EXCEPTION,
    IDT_NON_MASKABLE_INTERRUPT_EXCEPTION,
    IDT_BREAKPOINT_EXCEPTION,
    IDT_OVERFLOW_EXCEPTION,
    IDT_BOUND_RANGE_EXCEEDED_EXCEPTION,
    IDT_INVALID_OPCODE_EXCEPTION,
    IDT_DEVICE_NOT_AVAILABLE_EXCEPTION,
    IDT_DOUBLE_FAULT_EXCEPTION,
    IDT_COPROCESSOR_SEGMENT_OVERRUN_EXCEPTION,
    IDT_INVALID_TSS_EXCEPTION,
    IDT_SEGMENT_NOT_PRESENT_EXCEPTION,
    IDT_STACK_SEGMENT_FAULT_EXCEPTION,
    IDT_GENERAL_PROTECTION_FAULT_EXCEPTION,
    IDT_PAGE_FAULT_EXCEPTION,
    IDT_RESERVED_15,
    IDT_X87_FLOATING_POINT_EXCEPTION,
    IDT_ALIGNMENT_CHECK_EXCEPTION,
    IDT_MACHINE_CHECK_EXCEPTION,
    IDT_SIMD_FLOATING_POINT_EXCEPTION,
    IDT_VIRTUALIZATION_EXCEPTION,
    IDT_CONTROL_PROTECTION_EXCEPTION,
    IDT_REVERSED_22,
    IDT_REVERSED_23,
    IDT_REVERSED_24,
    IDT_REVERSED_25,
    IDT_REVERSED_26,
    IDT_RESERVED_27,
    IDT_HYPERVISOR_INJECTION_EXCEPTION,
    IDT_VMM_COMMINICATION_EXCETION,
    IDT_SECURITY_EXCEPTION,
    IDT_RESERVED_31,
    IDT_TRIPLE_FAULT_EXCEPTION,
    IDT_SYSCALL = 0x80
};

enum gateFlags
{
    IDT_FLAG_INTERRUPT = 0x8E,
    IDT_FLAG_TRAP = 0x8F,
    IDT_FLAG_TASK = 0x85
};

void IDTSetGate(uint8_t entry, uint32_t offset, segment_t segment, uint8_t typeAttributes);
void initIDT();